from aiogram.dispatcher.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram import types
from aiogram.dispatcher.filters import CommandHelp
from run import logger
import sqlite3
from bot.baseDir import DataBase
from bot.keyboards.keyboards import (
                                 keyboardReturnMenu,
                                 keyboardStart,
                                 keyboard_categories,
                                 keyboard_menu)
from run import bot, dp
from bot.config import (MSG,
                        ADMIN_ID,
                        DICTIONARY_PRESET)
from bot.payments.payments import (ym_payments,
                                   check_payment)


dbUser = DataBase('../lavka_preset/lavka_presets.db')

#----------------------------------------ADMIN--------------------------------------------------------
@dp.message_handler(Command('message'))
async def message_answer_check_admin(message: types.Message):
    if message.from_user.id in ADMIN_ID:
        id_users = await dbUser.import_id_users()
        for item in id_users:
                try:
                    if item[0] not in ADMIN_ID:
                        await bot.send_message(chat_id=item[0], text=message.text[9:])
                        if int(item[1]) != 1:
                            await dbUser.activeusers(True, item[0])
                except:
                    await dbUser.activeusers(False, item[0])
        await bot.send_message(message.from_user.id, MSG['successfulMessage'])
#----------------------------------------USERS--------------------------------------------------------

async def set_default_commands(bot: bot):
    return await bot.set_my_commands(
        commands=[
            BotCommand('start', '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'),
            BotCommand('help', '–ü–æ–º–æ—â—å')
        ]
    )
@dp.message_handler(commands='start')
async def show_shop(message: types.Message):
    try:
        await dbUser.add_users(message.chat.id, message.chat.first_name)
        await set_default_commands(bot)
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    except sqlite3.IntegrityError as ex:
        logger.debug(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    except Exception as ex:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞ {ex}')
    finally:
        await message.answer(f"{MSG['start']}", reply_markup=keyboardStart)
#--------------------------------------------------------–ú–µ–Ω—é –ø—Ä–µ—Å–µ—Ç–æ–≤----------------------------------------------------------
@dp.callback_query_handler(text=['start','menu'])
async def show_shop(callback: types.CallbackQuery):
    try:
        await callback.message.answer(MSG['preset'], reply_markup=keyboard_categories)
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
        await callback.answer()
    except Exception:
        logger.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π')

#--------------------------------------------------------–í—ã–±–æ—Ä –∏–∑ –¥–≤—É—Ö –º–µ–Ω—é-----------------------------------------------------
@dp.callback_query_handler(text=['one_combo'])
async def show_shop(callback: types.CallbackQuery):
    try:
        await callback.message.answer(MSG['preset'], reply_markup=keyboard_menu)
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ—Å–µ—Ç–æ–≤ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ')
        await callback.answer()
    except Exception:
        logger.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ—Å–µ—Ç–æ–≤ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ')



@dp.callback_query_handler(text=['helpPAY'])
async def helpPAY(callback: types.CallbackQuery):
    try:
        await bot.send_message(callback.message.chat.id,
                               MSG['helpPAY'],
                               reply_markup=keyboardStart)
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ø–æ–º–æ—â—å—é –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ')
        await callback.answer()
    except Exception:
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ—â–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ')

@dp.callback_query_handler(text=['settingsPresets'])
async def helpPAY(callback: types.CallbackQuery):
    try:
        await bot.send_video(callback.message.chat.id,
                             caption=MSG['settingsPresets'],
                             video=MSG['video'],
                             reply_markup=keyboardStart)
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ø–æ–º–æ—â—å—é –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–µ—Å–µ—Ç–∞')
        await callback.answer()
    except Exception:
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ—â–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–µ—Å–µ—Ç–∞')

@dp.message_handler(CommandHelp())
async def help_shop(message: types.Message):
    try:
        await message.answer(MSG['help'],
                             reply_markup=keyboardReturnMenu)
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –º–µ–Ω—é')
    except Exception:
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ—â–∏')

@dp.callback_query_handler(text='help')
async def help_shop(callback: types.CallbackQuery):
    try:
        await callback.message.answer(MSG['help'],
                                      reply_markup=keyboardReturnMenu)
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –º–µ–Ω—é')
        await callback.answer()
    except Exception:
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ—â–∏')
#-------------------------------------------------------------------------------------------------–ù–∞—á–∞–ª–æ---------------------------------------__------------------------------------------------------------------

@dp.callback_query_handler(text=[txt for txt in DICTIONARY_PRESET])
async def byu_proccess_sell(callback: types.CallbackQuery):
    try:
        await dbUser.add_presets(callback.message.chat.id, callback.data)
        payment_deatils = ym_payments(callback.data, callback.message.chat.id)

        paymentsBTN = InlineKeyboardMarkup(
            row_width=2,
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å '
                                         + DICTIONARY_PRESET[callback.data]['price'] + '‚ÇΩ',
                                         callback_data='pay',
                                         parse_mode='HTML',
                                         url=payment_deatils['confirmation']['confirmation_url']
                                        ),
                ],
                [
                    InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data='menu'),
                    InlineKeyboardButton(text='–ü–æ–º–æ—â—å', callback_data='help'),
                ],
            ]
        )
        await bot.send_photo(callback.message.chat.id,
                            photo=DICTIONARY_PRESET[callback.data]['photo_url'],
                            caption=DICTIONARY_PRESET[callback.data]['name'] + ', –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Äüòâ',
                            reply_markup=paymentsBTN, parse_mode='HTML')
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞ {DICTIONARY_PRESET[callback.data]["name"]}')
        await callback.answer()
        tmp = 0
        if await check_payment(payment_deatils['id'], callback.message.chat.id):
            data = await dbUser.check_presets(callback.message.chat.id)
            await bot.send_message(
                                callback.message.chat.id,
                                MSG['successful'].format(DICTIONARY_PRESET[callback.data]['price'])
                                )
            res = DICTIONARY_PRESET[data]['file_name']
            for item in res:
                await bot.send_document(
                                        callback.message.chat.id,
                                        document=item
                                        )
            logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Å–≤–æ–∏ –ø—Ä–µ—Å—Å–µ—Ç—ã')
        else:
            tmp += 1
            if tmp < 2:
                await bot.send_message(callback.message.chat.id, text=MSG['exitText'])
                logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø–æ–∫—É–ø–∫–∏')
    except Exception:
        logger.error('–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!!!')
